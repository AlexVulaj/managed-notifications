#!/bin/bash
#set -x

# Developed & tested on bash 5.0.17(1), ocm 0.1.54, & osdctl bf5c45f

## Variables
filters=()           # Filters applied when evaluating clusters
servicelogParams=()  # Parameters applied to servicelog template
template=""          # Path/url to servicelog template

## Functions
# Prints text in bold
printBold() {
	printf "$(tput bold)${@}$(tput sgr0)"
}

# Print docs
usage() {
cat << EOF
Command line utility to send bulk servicelogs based on provided filters.

  Usage:
    $0 [flags] -t [template file]

  Required Flags: 
    -t, --template                 Servicelog template to employ. See 'osdctl servicelog post --help' for more information

  Optional Flags:
    -f, --filter, --filters        Apply ocm '--parameters search=' filters to cluster list. Listing this flag multiple times joins the individual clauses with logical 'AND'. 
                                   See 'ocm list clusters --help' and the examples below for more information.

    -p, --param                    Parameters to apply to the given servicelog template. See 'osdctl servicelog post --help' for more information. 
                                   $(tput bold)NOTE: 'CLUSTER_UUID' parameter does not need to be included with the '-p' flag.$(tput sgr0) 

  Examples:

    Send a servicelog to all clusters older than OSD 4.7.0
      $0 -f "version.id < 'openshift-v4.7.0'" -t https://github.com/openshift/managed-notifications/blob/master/osd/upgrade_cluster_version.json -p "CURRENT_VERSION='<4.7.0'" -p "BZ_LINK='https://bugzillalink'" -p "LATEST_VERSION='>4.7.0'"

    Send a servicelog to all clusters located in the 'us-west-1' region (aws specific - using 'us-west1' notify clusters on gcp) and whose state is not 'ready'
      $0 -f "region.id is 'us-west-1'" -f "state is not 'ready'" -t https://github.com/openshift/managed-notifications/blob/master/osd/unknown_failure.json -p "ALERT_NAME='missing cluster'" -p "BRIEF_DESCRIPTION='an AWS region-wide outage'".

    Send a servicelog to all clusters created before 2021-01-01
      $0 -f "creation_timestamp < '2021-01-01'" -t ...

    Send a servicelog to all clusters (AWS and GCP) in a specific part of the world, whose clusters are not ready
      $0 -f "(region.id is 'us-west1' or region.id is 'us-west-1') and state is not 'ready'" -t ...

Use 'ocm get cluster \$CLUSTERID' for the json output containing filter fields for a given cluster
EOF
}

# Retrieves a filtered list of clusters using ocm
# Arguments:
#  1 (filters) - (Optional, I guess) List of filters to apply when querying ocm
#
# Returns:
#  List of clusters 
get_clusters() {
	cmd="ocm list clusters --no-headers"
	for filter in "${filters[@]}";
	do
		cmd="${cmd} --parameter search=\"${filter}\""
	done
	eval "${cmd}"
}

# Creates a servicelog, exiting on error.
# Arguments:
#   1 (dry-run)     - Bool determining if servicelog should be sent as dry-run or not (1 = send message, else dry-run).
#   2 (template)    - Template file to utilize
#   3 (parameters)  - (Optional) List of parameters to use for the given template file
# 
# Returns:
#   (none)
generate_servicelog() {
	cmd="osdctl servicelog post"
	if [[ $1 -ne 1 ]];
	then
		cmd="${cmd} -d"
	fi
	shift

    cmd="${cmd} -t $1"
	shift

    for parameter in "$@";
	do
		cmd="${cmd} -p ${parameter}"
	done

	eval "${cmd}"
	if [[ $? -ne 0 ]];
	then
		exit 1
	fi
}

# Prints a sample of the servicelog to post. Exits if dry-run was unsuccessful
# Arguments:
#   1 (template)   - Template file to utilize
#   2 (parameters) - (Optional) List of parameters to use for the given template file
#
# Returns:
#   (none)
dryrun_servicelog() {
	# Use 'generate_servicelog 0 ...' to send dry-run servicelog
	generate_servicelog 0 "$@" "CLUSTER_UUID='<Cluster UUID>'"
}

# Sends a servicelog to the given cluster. Exits if message could not be sent
# Arguments:
#   1 (cluster)    - External id of cluster receiving servicelog
#   2 (template)   - Template file to utilize
#   3 (parameters) - (Optional) List of parameters to use for the given template file
#
# Returns:
#   (none)
send_servicelog() {
	# Use 'generate_servicelog 1 ...' to send real servicelog
	generate_servicelog 1 "${@:2}" "CLUSTER_UUID=$1"
}


## Main
# Parse & validate CLI args
while [[ $# -gt 0 ]];
do
	case "$1" in 
	-f|--filter|--filters)
		filters+=("$2")
		shift
		shift
		;;
	-t|--template)
		template="$2"
		shift
		shift
		;;
	-p|--param)
		if [[ $(awk -F '=' '{print $1}' <<< $2) == "CLUSTER_UUID" ]];
		then
			printBold "Warning: "; printf "Ignoring supplied parameter '$2' (CLUSTER_UUID should not be provided)\n"
		else
			servicelogParams+=("$2")
		fi
		shift
		shift
		;;
	-h|--help)
		usage
		exit 0
		;;
	*)
		printf "Unrecognized argument: $1\n\n"
		usage
		exit 1
		;;
	esac
done

if [[ -z ${template} ]];
then
	printBold "Missing required argument '-t,--template'\n\n"
	usage
	exit 2
fi

# Obtain filtered list of clusters to message
clusters=$(get_clusters "${filters[@]}")
if [[ -z ${clusters} ]];
then
	printf "No clusters matched the supplied filters: "; printf "\"%s\" " "${filters[@]}"; printf "\n"
	exit 3
fi

printBold "Matching clusters: \n"
printf "${clusters}\n"

# Dry run servicelog & confirm
printBold "\nThe following servicelog will be sent to the above clusters:\n"
dryrun_servicelog "${template}" "${servicelogParams[@]}"
printBold "\nContinue? "; read -p "(y/N) " rawInput
input="${rawInput,,}"  # Convert user input to lowercase
if [[ "${input}" != "yes" ]] && [[ "${input}" != "y" ]];
then
	if [[ "${input}" != "no" ]] && [[ "${input}" != "n" ]];
	then
		printf "Unexpected input '${rawInput}'. Use 'y' or 'yes' (case-insensitive) to continue. "
	fi
	printf "Aborting.\n"
	exit 99
fi

# Send servicelog to each cluster with a valid external_uuid
printBold "\nSending servicelogs:\n"
printf "${clusters}\n" | while read cluster;
do
	# Issue: external_id gets truncated if it's added as a column to 'ocm list cluster' && increasing column padding (--padding)
	# reduces readability. Therefore, external_id appears to be most easily retrieved jq
	externalID=$(ocm get cluster $(awk -F " " '{print $1}' <<< ${cluster}) | jq -r .external_id)
	clusterName=$(awk -F " " '{print $2}' <<< ${cluster})

	if [[ "${externalID}" == "null" ]];
	then
		printBold "Warning: "; printf "Ignoring cluster '${clusterName}'. No external ID detected.\n"
	else
		printf "${clusterName}:\n"
		send_servicelog "${externalID}" "${template}" "${servicelogParams}"
	fi
	printf "\n"
done

